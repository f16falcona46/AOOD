import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.font.TextAttribute;
import java.util.HashMap;
import java.util.Map;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import jssc.SerialPort;
import jssc.SerialPortException;
import jssc.SerialPortList;

public class Oscilliscope {
	private static final int BYTES_PER_SCREEN = 256;
	private static final int SCREEN_HEIGHT = 256;
	
	private static class ScopeArea extends JPanel {
		private static final long serialVersionUID = 5283408121493711494L;
		
		private SerialPort port;
		
		ScopeArea() {
			String[] ports = SerialPortList.getPortNames();
			String portName = (String)JOptionPane.showInputDialog(null,"Choose COM port:","COM Ports",JOptionPane.PLAIN_MESSAGE,null,ports,null);
			port = new SerialPort(portName);
			setBackground(new Color(250,250,240));
		}
		
		public void paintComponent(Graphics g) {
			super.paintComponent(g);
			RenderingHints rh = new RenderingHints(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
			((Graphics2D)g).setRenderingHints(rh);
			Map<TextAttribute, Object> attributes = new HashMap<>();
			attributes.put(TextAttribute.SIZE, 20);
			g.setFont(Font.getFont(attributes));
			g.drawString("YOLOSWAG", 50, 50);
			
			try {
				port.openPort();
				port.setParams(115200, 8, 1, 0);
				byte[] buffer = port.readBytes(BYTES_PER_SCREEN);
				port.closePort();
				for (int i = 0; i < BYTES_PER_SCREEN; ++i) {
					g.fillRect(i, buffer[i], i+1, buffer[i]+1);
				}
			}
			catch (SerialPortException ex) {
				System.out.println(ex);
			}
		}
	}
	
	private static class ScopeWindow implements ActionListener {
		
		private JFrame frame;
		private ScopeArea plane;
		
		ScopeWindow() { //so when code is copied, old constructor isn't used by accident
			JFrame.setDefaultLookAndFeelDecorated(false);
			frame = new JFrame("Scope");
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			
			plane = new ScopeArea();
			plane.setPreferredSize(new Dimension(BYTES_PER_SCREEN, SCREEN_HEIGHT));
			plane.repaint();
			
			frame.setContentPane(plane);
			frame.pack();
			frame.setVisible(true);
		}
		
		public void actionPerformed(ActionEvent ev) {
			System.out.println(ev);
		}
	}
	
	public static void main(String args[]) {
		ScopeWindow win = new ScopeWindow();
	}
}
