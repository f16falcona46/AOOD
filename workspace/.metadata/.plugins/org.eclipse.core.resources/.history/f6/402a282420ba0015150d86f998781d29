import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.font.TextAttribute;
import java.util.HashMap;
import java.util.Map;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.border.EmptyBorder;

import jssc.SerialPort;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialPortException;
import jssc.SerialPortList;

public class Oscilliscope {
	private static final int BYTES_PER_SCREEN = 256;
	private static final int SCREEN_HEIGHT = 256;
	
	private static class ScopeWindow implements ActionListener {
		
		private JFrame frame;
		private JPanel contentPane;
		private PortHolder holder;
		private ScopeArea screen;
		private VisualizationArea area;
		
		ScopeWindow() { //so when code is copied, old constructor isn't used by accident
			JFrame.setDefaultLookAndFeelDecorated(false);
			frame = new JFrame("ADC Visualization");
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			
			contentPane = new JPanel();
			contentPane.setLayout(new GridLayout(1,2,5,5));
			contentPane.setBorder(new EmptyBorder(0,0,0,0));
			
			holder = new PortHolder();
			
			screen = new ScopeArea(holder);
			screen.setPreferredSize(new Dimension(BYTES_PER_SCREEN, SCREEN_HEIGHT));
			screen.repaint();
			contentPane.add(screen);
			
			area = new VisualizationArea(holder);
			area.setPreferredSize(new Dimension(BYTES_PER_SCREEN, SCREEN_HEIGHT));
			area.repaint();
			contentPane.add(area);
			
			frame.setContentPane(contentPane);
			frame.setResizable(false);
			frame.pack();
			frame.setVisible(true);
		}
		
		public void actionPerformed(ActionEvent ev) {
			System.out.println(ev);
		}
	}
	
	private static void runGUI() {
		JFrame.setDefaultLookAndFeelDecorated(false);
		new ScopeWindow();
	}
	
	
	public static void main(String args[]) {
		javax.swing.SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				runGUI();
			}
		});
	}
	
	private static int[] convUnsignedByteArrToIntArr(byte[] byteArr) {
		int[] result = new int[byteArr.length];
		for (int i = 0; i < byteArr.length; ++i) {
			result[i] = byteArr[i]&0xFF;
		}
		return result;
	}
}
