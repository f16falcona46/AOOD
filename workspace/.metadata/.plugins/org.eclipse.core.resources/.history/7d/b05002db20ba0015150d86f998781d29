import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JPanel;
import javax.swing.Timer;

public class ScopeArea extends JPanel implements ActionListener {
	private static final long serialVersionUID = 5283408121493711494L;
	
	private int[] buffer;
	private int head;
	private Timer refreshTimer;
	private int width;
	
	ScopeArea(PortHolder holder, int newWidth) {
		holder.addActionListener(this);
		width = newWidth;
		
		setBackground(new Color(250,250,240));
		refreshTimer = new Timer(1, this);
		refreshTimer.setActionCommand("repaint");
		refreshTimer.start();
		head = 0;
		buffer = new int[width];
	}
	
	@Override
	public void paintComponent(Graphics g) { 
		super.paintComponent(g);
		/*
		try {
			synchronized (buffer) {
				if (port.getInputBufferBytesCount() >= 1){//BYTES_PER_SCREEN) {
					buffer = convUnsignedByteArrToIntArr(port.readBytes(1));//BYTES_PER_SCREEN));
					System.out.println(port.getInputBufferBytesCount());
				}
				if (buffer != null) {
					for (int i = 0; i < 1;++i){//BYTES_PER_SCREEN; ++i) {
						g.fillRect(i,SCREEN_HEIGHT-buffer[i],1,1);
					}
				}
			}
		}
		catch (SerialPortException ex) {
			System.out.println(ex);
		}
		*/
		for (int i = 1; i < width-1;++i){
			//g.fillRect(i,this.getHeight()-buffer[(i+head)%buffer.length],1,1);
			g.drawLine(i-1, this.getHeight()-buffer[(i-1+head)%buffer.length], i, this.getHeight()-buffer[(i+head)%buffer.length]);
		}
	}
	
	@Override
	public void actionPerformed(ActionEvent ev) {
		switch (ev.getActionCommand()) {
			case "repaint":
				this.repaint();
				break;
			case "byte gotten":
				buffer[(buffer.length+head-1)%buffer.length] = ((PortHolder)ev.getSource()).getReading();
				++head;
				break;
			default:
				break;
		}
	}
}